@page "/"

@using Bartonsoft.HourRecordOMeter.Shared
@using System.Threading
@inject HttpClient Http
@inject IJSRuntime jsRuntime

<img class="title" src="title.png" />


@if (forecasts == null)
{
<p><em>Loading...(or free tier of OpenWeatherMap API use has been reached)</em></p>
}
else
{
<div id="chart"></div>
<div id="legend">
    <ul>
        <li class="color0">Sea level 1.22 kg/m3</li>
        <li class="color1">---</li>
        <li class="color2">---</li>
        <li class="color3">---</li>
        <li class="color4">Maybe...</li>
        <li class="color5">---</li>
        <li class="color6">---</li>
        <li class="color7">---</li>
        <li class="color8">Brad Wiggins 1.176</li>
        <li class="color9">Do it! 1.0 kg/m3</li>
    </ul>
</div>
<p class="_clearfloat smalltext">Showing seven day forecast (evenings) of air density for Wellington Velodrome (-41.3056, 174.7896)</p>
<p class="smalltext"><i>(c) BartonSoft 2021</i></p>
}

@code {
    private HourRecordWeatherData[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<HourRecordWeatherData[]>("WeatherData?type=daily");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await renderChart();
    }

    private async Task renderChart()
    {
        var value = forecasts.Select(v => v.AirDensity);
        var label = forecasts.Select(l => l.DateTime.ToShortDateString());

        await jsRuntime.InvokeVoidAsync("generateLineChart", value, label);
    }
}
